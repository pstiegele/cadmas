#!/usr/bin/env node

/**
 * Module dependencies.
 */

var app = require('../app');
var debug = require('debug')('cadmas:server');
var https = require('https');
var fs = require('fs');
var express = require('express');
//var httpApp = express();

/**
 * Get port from environment and store in Express.
 */

console.log('');
console.log('### CADMAS API-SERVER###');
console.log('');



var port = normalizePort(process.env.APIPORT || '3000');

app.set('port', port);


// if(process.env.SETUPHTTPSERVER === "true"){
//     var http = require('http');
//     var httpPort = normalizePort(process.env.HTTPPORT || '80');
//     httpApp.set('port', httpPort);
//     var httpServer = http.createServer(httpApp).listen(httpApp.get('port'), function(){
//       console.log('HTTP redirect server is listening on port:\t'+ httpApp.get('port'));
//     });
//     httpApp.get('*', function(req,res){
//       res.redirect("https://" + req.headers.host + req.path);
//     });
// }


/**
 * Create HTTP server.
 */

var httpsServerOptions = {
  key: fs.readFileSync('keys/key.pem'),
  cert: fs.readFileSync('keys/cert.pem')
}


var server = https.createServer(httpsServerOptions, app);

/**
 * Socket.io
 */

var io = app.io
io.serveClient(true);
io.attach(server);


/**
 * Listen on provided port, on all network interfaces.
 */

server.listen(port, function() {
  console.log('HTTPS API-server is listening on port:\t\t' + port);
});
server.on('error', onError);
server.on('listening', onListening);

/**
 * Normalize a port into a number, string, or false.
 */

function normalizePort(val) {
  var port = parseInt(val, 10);

  if (isNaN(port)) {
    // named pipe
    return val;
  }

  if (port >= 0) {
    // port number
    return port;
  }

  return false;
}

/**
 * Event listener for HTTP server "error" event.
 */

function onError(error) {
  if (error.syscall !== 'listen') {
    throw error;
  }

  var bind = typeof port === 'string' ?
    'Pipe ' + port :
    'Port ' + port;

  // handle specific listen errors with friendly messages
  switch (error.code) {
    case 'EACCES':
      console.error(bind + ' requires elevated privileges');
      process.exit(1);
      break;
    case 'EADDRINUSE':
      console.error(bind + ' is already in use');
      process.exit(1);
      break;
    default:
      throw error;
  }
}

/**
 * Event listener for HTTP server "listening" event.
 */

function onListening() {
  var addr = server.address();
  var bind = typeof addr === 'string' ?
    'pipe ' + addr :
    'port ' + addr.port;
  debug('Listening on ' + bind);
}
